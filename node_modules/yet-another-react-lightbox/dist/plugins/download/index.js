import { createIcon, useLightboxProps, useLightboxState, isImageSlide, IconButton, addToolbarButton } from '../../index.js';
import * as React from 'react';
import { PLUGIN_DOWNLOAD } from '../../types.js';

function download(url, name) {
    const xhr = new XMLHttpRequest();
    xhr.open("GET", url);
    xhr.responseType = "blob";
    xhr.onload = () => {
        saveAs(xhr.response, name);
    };
    xhr.onerror = () => {
        console.error("Failed to download file");
    };
    xhr.send();
}
function corsEnabled(url) {
    const xhr = new XMLHttpRequest();
    xhr.open("HEAD", url, false);
    try {
        xhr.send();
    }
    catch (e) {
    }
    return xhr.status >= 200 && xhr.status <= 299;
}
function click(link) {
    try {
        link.dispatchEvent(new MouseEvent("click"));
    }
    catch (e) {
        const event = document.createEvent("MouseEvents");
        event.initMouseEvent("click", true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null);
        link.dispatchEvent(event);
    }
}
function saveAs(source, name) {
    const link = document.createElement("a");
    link.rel = "noopener";
    link.download = name || "";
    if (!link.download) {
        link.target = "_blank";
    }
    if (typeof source === "string") {
        link.href = source;
        if (link.origin !== window.location.origin) {
            if (corsEnabled(link.href)) {
                download(source, name);
            }
            else {
                link.target = "_blank";
                click(link);
            }
        }
        else {
            click(link);
        }
    }
    else {
        link.href = URL.createObjectURL(source);
        setTimeout(() => URL.revokeObjectURL(link.href), 30000);
        setTimeout(() => click(link), 0);
    }
}

const DownloadIcon = createIcon("DownloadIcon", React.createElement("path", { d: "M18 15v3H6v-3H4v3c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2v-3h-2zm-1-4-1.41-1.41L13 12.17V4h-2v8.17L8.41 9.59 7 11l5 5 5-5z" }));
function DownloadButton() {
    const { render, on } = useLightboxProps();
    const { currentSlide, currentIndex } = useLightboxState();
    if (render.buttonDownload) {
        return React.createElement(React.Fragment, null, render.buttonDownload());
    }
    const downloadUrl = (currentSlide === null || currentSlide === void 0 ? void 0 : currentSlide.downloadUrl) || (currentSlide && isImageSlide(currentSlide) ? currentSlide.src : undefined);
    return (React.createElement(IconButton, { label: "Download", icon: DownloadIcon, renderIcon: render.iconDownload, disabled: !downloadUrl, onClick: () => {
            var _a;
            if (downloadUrl) {
                saveAs(downloadUrl, currentSlide === null || currentSlide === void 0 ? void 0 : currentSlide.downloadFilename);
                (_a = on.download) === null || _a === void 0 ? void 0 : _a.call(on, { index: currentIndex });
            }
        } }));
}

function Download({ augment }) {
    augment(({ toolbar, ...restProps }) => ({
        toolbar: addToolbarButton(toolbar, PLUGIN_DOWNLOAD, React.createElement(DownloadButton, null)),
        ...restProps,
    }));
}

export { Download as default };
